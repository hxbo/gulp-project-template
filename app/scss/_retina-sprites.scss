@import "compass/utilities/sprites";
@import "compass/css3/background-size";

//normal and retina
//How to use : @include image-set($name);
@mixin image-set($name) {
    display: block;
    height: image-height(sprite-file($sprites-image-set, $name));
    width: image-width(sprite-file($sprites-image-set, $name));
    background: sprite-url($sprites-image-set);
    background-position: sprite-position($sprites-image-set, $name); //position must after background
    background-image: -webkit-image-set(sprite-url($sprites-image-set) 1x, sprite-url($sprites-image-set-x2) 2x);
    background-image: -moz-image-set(sprite-url($sprites-image-set) 1x, sprite-url($sprites-image-set-x2) 2x);
    background-image: -ms-image-set(sprite-url($sprites-image-set) 1x, sprite-url($sprites-image-set-x2) 2x);
}

//    $sprites-image-set: sprite-map("retina/items-icon/*.png", $layout: diagonal); // import 1x sprites
//    $sprites-image-set-x2: sprite-map("retina/items-icon-2x/*.png", $layout: diagonal); // import 2x sprites




//only retina
//How to use : @include image-retina($name);

@mixin image-retina($name) {
    $pos: sprite-position($sprites-only-x2, $name);
    height: image-height(sprite-file($sprites-only-x2, $name))/2;
    width: image-width(sprite-file($sprites-only-x2, $name))/2;
    background: sprite-url($sprites-only-x2) ;
    @include background-size(ceil(image-width(sprite-path($sprites-only-x2)) / 2) auto);
    background-position: nth($pos, 1) / 2 nth($pos, 2) / 2 ;
}

//  $sprites-only-x2: sprite-map("retina/items-icon-2x/*.png");






//   retina sprite mixin
//
//
//    @include retina-sprite(name, $spritemap1, $spritemap2)
//    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//
//    $sprites: sprite-map("retina/items-icon/*.png");            // must before _retina-sprites.scss
//    $sprites2x: sprite-map("retina/items-icon-2x/*.png");   // must before _retina-sprites.scss

//    $sprites: sprite-map("sprites/buttons/*.png", $spacing: 10px);            // import 1x sprites, 10px padding
//    $sprites2x: sprite-map("sprites-retina/buttons/*.png", $spacing: 20px);   // import 2x sprites, 20px padding

//    @include retina-sprite(signIn, $hover: true, $active: true);    // imports signIn.png, signIn_hover.png, and signIn_active.png
//    @include retina-sprite(signIn, $hover: true);                    // imports signIn.png and signIn_hover.png
//    @include retina-sprite(signIn);                                  // imports signIn.png


@mixin retina-sprite($name, $hover: false, $active: false) {
    @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
}

@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {
    @if $dimensions == true {
        @include sprite-dimensions($sprites, $name);
    }
    background-image: sprite-url($sprites);
    background-position: sprite-position($sprites, $name, -$pad, -$pad);
    background-repeat: no-repeat;

    @if $hover == true {
        $name_hover: $name + _hover;
        &:hover {
            background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
        }
    }
    @if $active == true {
        $name_active: $name + _active;
        &:active {
            background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
        }
    }

    @if $pad > 0 {
        padding: $pad;
    }

    @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
        & {
            $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
            background-image: sprite-url($sprites2x);
            background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
            @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
            //  sprite-path() returns the path of the generated sprite sheet, which
            //  image-width() calculates the width of. the ceil() is in place in case
            //  you have sprites that have an odd-number of pixels in width

            @if $hover == true {
                $name_hover: $name + _hover;    // create myButton_hover and assign it
                &:hover{
                    $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
                    background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
                }
            }
            @if $active == true {
                $name_active: $name + _active;    // create myButton_active and assign it
                &:active{
                    $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
                    background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
                }
            }
        }
    }
}


